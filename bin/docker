#!/usr/bin/env zsh

PRJ_ROOT="$(cd $(dirname $0)/..; pwd)"

NAME="activity_monitor"
DOCKER_IMAGE_NAME="${NAME}_rb"
DOCKER_IMAGE_VER="latest"
DOCKER_WORK_D="/app"
DOCKER_APP_D="$(cd $(dirname $0)/..; pwd)"
DOCKER_BUNDLE_PATH="${DOCKER_WORK_D}/.data/bundle"
DOCKER_CMD=${*[@]:1}
DOCKER_SHARED_VOLUME_NAME="activity_monitor_rb_shared"
DOCKER_SERVER_HOST="0.0.0.0"
DOCKER_SERVER_PORT="22229"
HOST_USER_ID="$(id -u)"
HOST_GROUP_ID="$(id -g)"

if [[ $(docker image inspect $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_VER > /dev/null; echo $?) -gt 0 ]] then
    echo "Docker image not found. Building an image"

    docker buildx build \
        --build-arg HOST_GROUP_ID=$HOST_GROUP_ID \
        --build-arg HOST_USER_ID=$HOST_USER_ID \
        -f $PRJ_ROOT/.config/docker/Dockerfile \
        -t $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_VER \
        .

    echo "Finished building docker image."
fi

if [[ $(docker volume inspect $DOCKER_SHARED_VOLUME_NAME > /dev/null; echo $?) -gt 0 ]] then
    
    echo "Docker shared volume not found. Creating a volume..."
    
    docker volume create $DOCKER_SHARED_VOLUME_NAME

    echo "Created an empty volume $DOCKER_SHARED_VOLUME_NAME"

    docker run --rm -idt \
        -v $DOCKER_SHARED_VOLUME_NAME:$DOCKER_WORK_D \
        --name "${DOCKER_IMAGE_NAME}_tmpcont" \
        $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_VER \
        tail -f /dev/null

    echo "Created a temporary container ${DOCKER_IMAGE_NAME}_tmpcont"

    docker cp . ${DOCKER_IMAGE_NAME}_tmpcont:/app
    
    echo "Copied project root into temporary container ${DOCKER_IMAGE_NAME}_tmpcont"

    docker container stop ${DOCKER_IMAGE_NAME}_tmpcont
    echo "Stopped temporary container ${DOCKER_IMAGE_NAME}_tmpcont"

fi


[[ -n $DEBUG ]] && echo "DOCKER_RUN_CMD = \' docker run -it --rm \
    -w $DOCKER_WORK_D \
    -v $DOCKER_APP_D:$DOCKER_WORK_D \
    $DOCKER_IMAGE:$DOCKER_IMAGE_VER \
    $DOCKER_CMD\'"

## quick n dirty, to get a simple test env running to test the db connection for pgsql adapter
# prepend the env variable with any content to enable this
# $> PGSQL=t bin/docker .......
if [[ $(docker network inspect ${NAME}_network > /dev/null; echo $?) -gt 0 ]] then 
    docker network create ${NAME}_network
fi

if [[ -n $PGSQL ]] then
    if [[ $(docker container inspect ${NAME}_pgsql_cont > /dev/null; echo $?) -eq 0 ]] then
        docker container stop ${NAME}_pgsql_cont
    fi

    echo "Starting the Postgresql test container"
    
    docker run -it --rm \
        -d \
        --network ${NAME}_network \
        -e POSTGRES_DB=${NAME} \
        -e POSTGRES_PASSWORD=postgres \
        -e POSTGRES_USER=postgres \
        --name ${NAME}_pgsql_cont \
        postgres:15.5-alpine3.18

    echo "waiting for db container to spin up"
    sleep 3
fi

docker run -it --rm \
    --network ${NAME}_network \
    -e DATABASE_URL=${DATABASE_URL} \
    -e BUNDLE_PATH=${DOCKER_BUNDLE_PATH} \
    -e AM_ENV=${AM_ENV} \
    -w $DOCKER_WORK_D \
    -p $DOCKER_SERVER_PORT:9292 \
    --mount type=bind,source=${PRJ_ROOT},target=$DOCKER_WORK_D \
    $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_VER \
    /bin/sh -l -c "$DOCKER_CMD"


